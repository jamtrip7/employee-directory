{"version":3,"sources":["components/Header.js","components/Container.js","components/Table.js","utils/API.js","components/Search.js","components/Results.js","App.js","index.js"],"names":["Header","className","Container","props","children","Table","employees","matchSearch","sortedEmployees","flat","value","direction","sort","a","b","name","last","scope","onClick","reverseOrder","map","employee","imgSrc","picture","thumbnail","first","fullName","location","city","state","fullLocation","phoneNumber","phone","email","formattedBirthDate","moment","dob","date","format","src","alt","login","username","directoryUrl","fetchRandomEmployees","axios","get","Search","onSubmit","handleFormSubmit","type","placeholder","aria-label","onChange","handleInputChange","EmployeeResults","search","event","target","setState","searchEmployees","trim","preventDefault","formattedSearch","charAt","toUpperCase","slice","verifiedMatches","filter","includes","push","API","then","res","data","results","catch","err","console","log","this","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6fc1ccda.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid bg-dark\">\r\n            <div className=\"container text-white\">\r\n                <u><h1 className=\"display-4 text-center mb-3\">Employee Directory</h1></u>\r\n                <p className=\"lead text-center\">Search the directory to get any employees info.</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return <div className={`container w-100`}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport Container from \"./Container\";\r\nimport moment from 'moment';\r\n\r\nfunction Table(props) {\r\n\r\n    const { employees, matchSearch } = props;\r\n\r\n    // Sorted employees = an array of all employees that match the search (if specified)\r\n    // The array is flattened, meaning that the sub-array that was nested is\r\n    // flattened back into the parent array\r\n    let sortedEmployees = [...matchSearch].flat();\r\n\r\n    // If the search box is blank (if a user deleted a previous search)\r\n    // this will revert the employees listed back to the original list pulled from the API\r\n\r\n    if(props.value === \"\") {\r\n        sortedEmployees = [...employees];\r\n    }\r\n\r\n    // This sorting function works by comparing the last names to each other\r\n    // Two last names are passed in as arguments and compared against each other\r\n    // -1 = the first last name (a) should come before the second (b)\r\n    // 1 = the second last name (b) should come before the first (a)\r\n    // 0 = the last names are identical\r\n\r\n    // Switch from A-Z and Z-A\r\n    if (props.direction === \"Ascending\") {\r\n        sortedEmployees.sort((a, b) => {\r\n            if (a.name.last < b.name.last) {\r\n                return -1;\r\n            } else if (a.name.last > b.name.last) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        })\r\n    } else if (props.direction === \"Descending\") {\r\n        sortedEmployees.sort((a, b) => {\r\n            if (a.name.last > b.name.last) {\r\n                return -1;\r\n            } else if (a.name.last < b.name.last) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n\r\n        <Container>\r\n            <div className=\"table-responsive\">\r\n\r\n                <table className=\"table table-hover text-center\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th scope=\"col\"><button className=\"btn btn-secondary\">Image</button></th>\r\n                            <th scope=\"col\"><button className=\"btn btn-danger\" onClick={props.reverseOrder}>Name</button></th>\r\n                            <th scope=\"col\"><button className=\"btn btn-success\" onClick={props.reverseOrder}>Location</button></th>\r\n                            <th scope=\"col\"><button className=\"btn btn-primary\" onClick={props.reverseOrder}>Phone</button></th>\r\n                            <th scope=\"col\"><button className=\"btn btn-warning\" onClick={props.reverseOrder}>Email</button></th>\r\n                            <th scope=\"col\"><button className=\"btn btn-info\" onClick={props.reverseOrder}>Date of Birth</button></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {sortedEmployees.map((employee) => {\r\n\r\n                            // For each of the 100 items in the array (employee data), this is the\r\n                            // information that is pulled from the response and displayed in the table\r\n                            // Moment is used to format birthdates. \r\n\r\n                            const imgSrc = employee.picture.thumbnail;\r\n\r\n                            const { first, last } = employee.name;\r\n                            const fullName = `${first} ${last}`;\r\n\r\n                            const { city, state } = employee.location;\r\n                            const fullLocation = `${city}, ${state}`;\r\n\r\n                            const phoneNumber = employee.phone;\r\n\r\n                            const email = employee.email;\r\n\r\n                            const formattedBirthDate = moment(employee.dob.date).format('MM/DD/YYYY');\r\n\r\n                            return (\r\n                                <tr key = {employee.login.username}>\r\n                                <th scope=\"row\"><img src ={imgSrc} alt = \"Employee portrait\"/></th>\r\n                                <td className = \"align-middle\">{fullName}</td>\r\n                                <td className = \"align-middle\">{fullLocation}</td>\r\n                                <td className = \"align-middle\">{phoneNumber}</td>\r\n                                <td className = \"align-middle\">{email}</td>\r\n                                <td className = \"align-middle\">{formattedBirthDate}</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Table;","import axios from \"axios\";\r\n\r\nconst directoryUrl = {\r\n    fetchRandomEmployees: function() {\r\n        return axios.get(\"https://randomuser.me/api/?results=100\");\r\n    }\r\n};\r\n\r\nexport default directoryUrl;","import React from \"react\";\r\n\r\nfunction Search(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light d-flex justify-content-center mt-3 mb-3\">\r\n            <form className=\"form-inline\" onSubmit={props.handleFormSubmit}>\r\n                <input className=\"form-control mr-sm-2\" \r\n                type=\"search\" \r\n                placeholder=\"Search\" \r\n                aria-label=\"Search\"\r\n                onChange={props.handleInputChange} />\r\n                <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n            </form>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Search;","import React, { Component } from \"react\";\r\nimport Table from \"./Table\";\r\nimport API from \"../utils/API\";\r\nimport Search from \"./Search\";\r\n\r\nclass EmployeeResults extends Component {\r\n  state = {\r\n    employees: [],\r\n    search: \"\",\r\n    matchSearch: [],\r\n    direction: \"Ascending\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.fetchRandomEmployees()\r\n    .then(res =>\r\n        this.setState({ employees: res.data.results, matchSearch: res.data.results })\r\n    )\r\n    .catch(err => console.log(err));\r\n \r\n  }\r\n\r\n  handleInputChange = event => {\r\n    const value = event.target.value;\r\n    this.setState({ search: value });\r\n    this.searchEmployees(value.trim());\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    this.searchEmployees(this.state.search.trim());\r\n\r\n  };\r\n\r\n  searchEmployees = event => {\r\n      if (event) {\r\n\r\n        // Capitalize the first letter of the string the user entered because\r\n        // that is how the names are in the Random User API\r\n        let formattedSearch = event.charAt(0).toUpperCase() + event.slice(1);\r\n\r\n        // A new array will hold all the matches, which will then be used to update state\r\n        let verifiedMatches = [];\r\n\r\n        // Employees are filtered to see if the first or last name includes\r\n        // what was entered into the search bar\r\n          this.state.employees.filter((employee) => {\r\n\r\n              if (employee.name.first.includes(formattedSearch) || employee.name.last.includes(formattedSearch) ) {\r\n\r\n                // All verified matches in the search are pushed to this array\r\n                // The entire employee object is pushed\r\n\r\n                  verifiedMatches.push(employee)\r\n\r\n                // State is updated to reflect the matches\r\n                  this.setState({ matchSearch: [verifiedMatches] })\r\n\r\n                  return `${employee.name.first} ${employee.name.last}`\r\n              } else {\r\n                  return \"No employees found.\";\r\n              }\r\n\r\n          })\r\n      }\r\n  }\r\n\r\n  reverseOrder = event => {\r\n      if(this.state.direction === \"Ascending\") {\r\n        this.setState({ direction: \"Descending\" })\r\n      } else if(this.state.direction === \"Descending\") {\r\n        this.setState({ direction: \"Ascending\" })\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Search\r\n        value={this.state.search}\r\n        handleInputChange={this.handleInputChange}\r\n        handleFormSubmit={this.handleFormSubmit} \r\n        />\r\n        <Table\r\n        employees={this.state.employees}\r\n        matchSearch={this.state.matchSearch}\r\n        value={this.state.search}\r\n        direction={this.state.direction}\r\n        reverseOrder={this.reverseOrder}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeResults;","import React from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport EmployeeResults from \"./components/Results\";\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n  <div>\r\n    <Header />\r\n    <EmployeeResults />\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}